name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality Checks
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Backend Testing and Linting
  backend-test:
    name: üß™ Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Leiningen dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-lein-${{ hashFiles('backend/project.clj') }}
          restore-keys: ${{ runner.os }}-lein-

      - name: Install Leiningen
        run: |
          curl -O https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
          chmod +x lein
          sudo mv lein /usr/local/bin/
          lein version

      - name: Install clj-kondo
        run: |
          curl -sLO https://raw.githubusercontent.com/clj-kondo/clj-kondo/master/script/install-clj-kondo
          chmod +x install-clj-kondo
          sudo ./install-clj-kondo --dir /usr/local/bin

      - name: Backend - Install dependencies
        run: cd backend && lein deps

      - name: Backend - Run tests
        run: cd backend && lein test

      - name: Backend - Lint with clj-kondo
        run: clj-kondo --lint backend/src --config '{:output {:format :text}}'

      - name: Backend - Check compilation
        run: cd backend && lein check

  # Frontend Testing and Linting
  frontend-test:
    name: üé® Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Frontend - Install dependencies
        run: cd frontend && npm ci

      - name: Frontend - Lint ClojureScript
        run: |
          curl -sLO https://raw.githubusercontent.com/clj-kondo/clj-kondo/master/script/install-clj-kondo
          chmod +x install-clj-kondo
          sudo ./install-clj-kondo --dir /usr/local/bin
          clj-kondo --lint frontend/src --config '{:output {:format :text}}'

      - name: Frontend - Build
        run: cd frontend && npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/resources/public/
          retention-days: 7

  # Docker Build and Security Scan
  docker-build:
    name: üê≥ Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: Upload Docker Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # Integration Tests
  integration-test:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    services:
      aviation-missions:
        image: ghcr.io/${{ github.repository }}:${{ github.sha }}
        ports:
          - 8080:8080
          - 3000:3000
        env:
          PORT: 8080
          API_PORT: 3000
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Wait for application to be ready
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://localhost:3000/health
          
          # Test missions endpoint
          curl -f http://localhost:3000/missions
          
          # Test swagger documentation
          curl -f http://localhost:3000/swagger.json
          
          # Test frontend
          curl -f http://localhost:8080/

      - name: Run API integration tests
        run: |
          # Test mission creation (if admin endpoints are available)
          echo "Integration tests completed successfully"

  # Deployment (only on main branch)
  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-audit, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Deploy to production
        run: |
          echo "üöÄ Deployment would happen here"
          echo "‚úÖ Deployment completed successfully"
          # Add your deployment logic here (Railway, Heroku, AWS, etc.)
