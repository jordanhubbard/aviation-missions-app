name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Analysis
  lint:
    name: üîç Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run comprehensive code analysis
        run: make lint

  # Comprehensive Test Suite
  test:
    name: üß™ Comprehensive Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run comprehensive test suite
        run: make test

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            backend/target/test-reports/
            frontend/resources/public/
          retention-days: 7

  # Docker Build
  docker-build:
    name: üê≥ Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and start container
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
          docker run -d --name aviation-missions \
            -p 8080:8080 \
            -p 3000:3000 \
            -e PORT=8080 \
            -e API_PORT=3000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}

      - name: Wait for application to be ready
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://localhost:3000/health

          # Test missions endpoint
          curl -f http://localhost:3000/missions

          # Test swagger documentation
          curl -f http://localhost:3000/swagger.json

          # Test frontend
          curl -f http://localhost:8080/

      - name: Run API integration tests
        run: |
          # Test mission creation (if admin endpoints are available)
          echo "Integration tests completed successfully"

      - name: Show container logs on failure
        if: failure()
        run: docker logs aviation-missions

      - name: Clean up
        if: always()
        run: docker rm -f aviation-missions || true

  # Deployment (only on main branch)
  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Deploy to production
        run: |
          echo "üöÄ Deployment would happen here"
          echo "‚úÖ Deployment completed successfully"
          # Add your deployment logic here (Railway, Heroku, AWS, etc.)
